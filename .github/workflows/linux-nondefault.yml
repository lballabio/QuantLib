name: Linux build with non-default configuration
on: workflow_dispatch
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        include:
          - name: "gcc 5.4 (Boost 1.66)"
            shortname: gcc5
            tag: xenial
            cc: gcc
            cxx: g++
          - name: "gcc 6.3 (Boost 1.66)"
            shortname: gcc6
            tag: zesty
            cc: gcc
            cxx: g++
          - name: "gcc 7.4 (Boost 1.72)"
            shortname: gcc7
            tag: bionic
            cc: gcc
            cxx: g++
          - name: "gcc 8.3 (Boost 1.72)"
            shortname: gcc8
            tag: cosmic
            cc: gcc
            cxx: g++
          - name: "gcc 9.x"
            shortname: gcc9
            tag: focal
            cc: gcc
            cxx: g++
          - name: "gcc 10.x"
            shortname: gcc10
            tag: groovy
            cc: gcc
            cxx: g++
          - name: "Clang 6 (Boost 1.72)"
            shortname: clang6
            tag: bionic
            cc: clang
            cxx: clang++
          - name: "Clang 7 (Boost 1.72)"
            shortname: clang7
            tag: cosmic
            cc: clang
            cxx: clang++
          - name: "Clang 8 (Boost 1.72)"
            shortname: clang8
            tag: disco
            cc: clang
            cxx: clang++
          - name: "Clang 9 (Boost 1.74)"
            shortname: clang9
            tag: eoan
            cc: clang
            cxx: clang++
          - name: "Clang 10"
            shortname: clang10
            tag: focal
            cc: clang
            cxx: clang++
          - name: "Clang 11"
            shortname: clang11
            tag: groovy
            cc: clang
            cxx: clang++
          - name: "C++11 mode"
            shortname: c++11
            tag: rolling
            cc: gcc
            cxx: g++
            cxxflags: "-std=c++11"
          - name: "C++14 mode"
            shortname: c++14
            tag: rolling
            cc: gcc
            cxx: g++
            cxxflags: "-std=c++14"
          - name: "C++17 mode"
            shortname: c++17
            tag: rolling
            cc: gcc
            cxx: g++
            cxxflags: "-std=c++17"
          - name: "Unity build enabled"
            shortname: unity
            tag: rolling
            cc: gcc
            cxx: g++
            configureflags: --enable-unity-build
          - name: "C++11 classes enabled"
            shortname: stdclasses
            tag: rolling
            cc: gcc
            cxx: g++
            cxxflags: "-std=c++17"
            configureflags: --enable-std-classes
    container: ghcr.io/lballabio/quantlib-devenv:${{ matrix.tag }}
    steps:
    - uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2.1.4
      with:
        path: ~/.ccache
        key: linux-nondef-build-${{ matrix.shortname }}-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}
        restore-keys: |
          linux-nondef-build-${{ matrix.shortname }}-${{ github.ref }}-${{ github.head_ref }}-
          linux-nondef-build-${{ matrix.shortname }}-${{ github.ref }}-
          linux-nondef-build-${{ matrix.shortname }}-refs/heads/master-
          linux-nondef-build-${{ matrix.shortname }}-
    - name: Build
      run: |
        ./autogen.sh
        ./configure --disable-static --enable-error-lines --enable-error-functions --enable-tracing --enable-indexed-coupons --enable-extra-safety-checks --enable-sessions --enable-thread-safe-observer-pattern --enable-intraday ${{ matrix.configureflags }} CC="ccache ${{ matrix.cc }}" CXX="ccache ${{ matrix.cxx }}" CXXFLAGS="-O2 -g0 -Wall -Wno-unknown-pragmas -Werror ${{ matrix.cxxflags }}"
        make -j 2
    - name: Run tests
      run: |
        ./test-suite/quantlib-test-suite --log_level=message
    - name: Run examples
      run: |
        make check-examples
    - name: Check global header
      run: |
        echo "#include <ql/quantlib.hpp>" > test1.cpp && echo "int main() { return 0; }" >> test1.cpp
        echo "#include <ql/quantlib.hpp>" > test2.cpp && echo "namespace QuantLib { ThreadKey sessionId() { return 0; } }" >> test2.cpp
        make install
        ${{ matrix.cxx }} -O2 -g0 -Wall -Wno-unknown-pragmas -Werror ${{ matrix.cxxflags }} test1.cpp test2.cpp -lQuantLib -lboost_thread -lboost_system -pthread
